# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Ashish's CI/CD demo

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew bootJar
    - name: Cache the jar file for package and deploy stage
      uses: actions/cache@v2
      with:
        path: build/libs/ashish-cicd-demo-0.0.1-SNAPSHOT.jar
        key: app-jar-${{ github.sha }}
      
  test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Run the unit tests
      run: ./gradlew test

  packageAndDeploy:
    needs: [build, test]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Resture the jar file cached by build job
      uses: actions/cache@v2
      with:
        path: build/libs/ashish-cicd-demo-0.0.1-SNAPSHOT.jar
        key: app-jar-${{ github.sha }}
        restore-keys: |
          app-jar-${{ github.sha }}}
    - name: Build the docker image
      run: docker build --iidfile image.txt --build-arg JAR_FILE=build/libs/ashish-cicd-demo-0.0.1-SNAPSHOT.jar -t registry.heroku.com/heroku-app-name/web:${GITHUB_SHA} .
#       run: docker build --iidfile image.txt --build-arg JAR_FILE=build/libs/ashish-cicd-demo-0.0.1-SNAPSHOT.jar -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web:${GITHUB_SHA} .
#     - name: Login to docker registry
#       run: docker login --username=_ --password=${{ secrets.HEROKU_TOKEN }} registry.heroku.com
#     - name: Patch the container
#       run: |
#         curl -X PATCH https://api.heroku.com/apps/${{ secrets.HEROKU_APP_NAME }}/formation --header "ContentType: application/json" --header "Accept: application/vnd.heroku+json; version=3.docker-release" --header "Authorization: Bearer ${{ secrets.HEROKU_TOKEN }}" --data '{"updates": [{"type":"web", "docker_image": "'$(cat image.txt)'"}]}'
        
        
